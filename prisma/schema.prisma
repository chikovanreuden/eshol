generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model apitoken {
  apitokenUid      String   @id @db.Char(32)
  ciUser_userUid   String   @db.Char(32)
  token            String   @db.Char(128)
  clientId         String   @db.Char(128)
  active           String   @db.Char(1)
  useragent        String?  @db.Text
  customClientname String?  @db.VarChar(128)
  createdAt        DateTime @default(now()) @db.Timestamp(0)
  updatedAt        DateTime @default(now()) @db.Timestamp(0)
  ciUser           ciUser   @relation(fields: [ciUser_userUid], references: [userUid], onDelete: Cascade, map: "fk_apitoken_ciUser_userUid")

  @@index([ciUser_userUid], map: "fk_apitoken_ciUser_userUid")
}

model ci {
  ciUid           String          @id @db.Char(32)
  type            String          @db.VarChar(16)
  ciName          String          @db.VarChar(64)
  ciCreatedAt     DateTime        @default(now()) @db.Timestamp(0)
  ciUpdatedAt     DateTime        @default(now()) @db.Timestamp(0)
  ciDeactivatedAt DateTime?       @db.Timestamp(0)
  ciDeactivatedBy String?         @db.Char(32)
  ciDeletedAt     DateTime?       @db.Timestamp(0)
  ciDeletedBy     String?         @db.Char(32)
  photoId         String?         @db.VarChar(128)
  ciItem          ciItem?
  ciShoppinglist  ciShoppinglist?
  ciUser          ciUser?
}

model ciItem {
  itemUid        String         @id @db.Char(32)
  name           String         @db.VarChar(64)
  description    String?        @db.VarChar(512)
  shoppinglist   String         @db.Char(32)
  product        String?        @db.Char(32)
  addedBy        String         @db.Char(32)
  amount         Decimal        @default(0.000) @db.Decimal(20, 3)
  amountType     String         @default("x") @db.Char(4)
  status         String         @default("new") @db.Char(16)
  buyDate        DateTime?      @db.Timestamp(0)
  buyer          String?        @db.Char(32)
  buyAmount      Decimal?       @db.Decimal(20, 3)
  totalPrice     Decimal?       @db.Decimal(20, 3)
  createdAt      DateTime       @default(now()) @db.Timestamp(0)
  updatedAt      DateTime       @default(now()) @db.Timestamp(0)
  ciUser         ciUser         @relation(fields: [addedBy], references: [userUid], onDelete: NoAction, map: "fk_ciItem_addedBy_ciUser_userUid")
  ci             ci             @relation(fields: [itemUid], references: [ciUid], onDelete: Cascade, map: "fk_ciItem_itemUid_ci_ciUid")
  ciShoppinglist ciShoppinglist @relation(fields: [shoppinglist], references: [splUid], onDelete: Cascade, map: "fk_ciItem_shoppinglist_ciShoppinglist_splUid")

  @@index([addedBy], map: "fk_ciItem_addedBy_ciUser_userUid")
  @@index([shoppinglist], map: "fk_ciItem_shoppinglist_ciShoppinglist_splUid")
}

model ciProduct {
  ci_ciUid    String   @db.Char(32)
  productUid  String   @id @db.Char(32)
  name        String   @db.VarChar(256)
  brand       String?  @db.VarChar(128)
  price       Float?
  created     DateTime @default(now()) @db.Timestamp(0)
  updated     DateTime @default(now()) @db.Timestamp(0)
  description String?  @db.Text
  amountType  String?  @db.Char(4)
  createdBy   String   @db.Char(32)
}

model ciShoppinglist {
  splUid               String                 @id @db.Char(32)
  name                 String                 @db.VarChar(64)
  owner                String                 @db.Char(32)
  privacy              String                 @default("private") @db.Char(16)
  createdAt            DateTime               @default(now()) @db.Timestamp(0)
  updatedAt            DateTime               @default(now()) @db.Timestamp(0)
  ciUser               ciUser                 @relation(fields: [owner], references: [userUid], onDelete: Cascade, map: "fk_ciShoppinglist_owner_ciUser_userUid")
  ci                   ci                     @relation(fields: [splUid], references: [ciUid], onDelete: Cascade, map: "fk_ciShoppinglist_splUid_ci_ciUid")
  ciItem               ciItem[]
  ciShoppinglistMember ciShoppinglistMember[]

  @@index([owner], map: "fk_ciShoppinglist_owner_ciUser_userUid")
}

model ciShoppinglistMember {
  userUid        String         @db.Char(32)
  splUid         String         @db.Char(32)
  permission     String         @db.Char(32)
  createdAt      DateTime       @default(now()) @db.Timestamp(0)
  updatedAt      DateTime       @default(now()) @db.Timestamp(0)
  ciShoppinglist ciShoppinglist @relation(fields: [splUid], references: [splUid], onDelete: Cascade, map: "fk_ciShoppinglistMember_splUid_ciShoppinglist_splUid")
  ciUser         ciUser         @relation(fields: [userUid], references: [userUid], onDelete: Cascade, map: "fk_ciShoppinglistMember_userUid_ciUser_userUid")

  @@id([userUid, splUid])
  @@index([splUid], map: "fk_ciShoppinglistMember_splUid_ciShoppinglist_splUid")
}

model ciUser {
  userUid                String                 @id @db.Char(32)
  username               String                 @unique(map: "username") @db.Char(32)
  displayname            String                 @db.VarChar(64)
  email                  String                 @unique(map: "email") @db.VarChar(64)
  emailVerificationToken String?                @db.VarChar(64)
  role                   String                 @default("user") @db.VarChar(32)
  createdAt              DateTime               @default(now()) @db.Timestamp(0)
  updatedAt              DateTime               @default(now()) @db.Timestamp(0)
  ci                     ci                     @relation(fields: [userUid], references: [ciUid], onDelete: Cascade, map: "fk_ciUser_userUid_ci_ciUid")
  apitoken               apitoken[]
  ciItem                 ciItem[]
  ciShoppinglist         ciShoppinglist[]
  ciShoppinglistMember   ciShoppinglistMember[]
  userpasswd             userpasswd[]
}

model userpasswd {
  passwdId       Int      @id @default(autoincrement())
  ciUser_userUid String   @db.Char(32)
  pwhash         String   @db.VarChar(256)
  createdAt      DateTime @default(now()) @db.Timestamp(0)
  updatedAt      DateTime @default(now()) @db.Timestamp(0)
  ciUser         ciUser   @relation(fields: [ciUser_userUid], references: [userUid], onDelete: Cascade, map: "fk_userpassword_ciUser_userUid")

  @@index([ciUser_userUid], map: "fk_userpassword_ciUser_userUid")
}
